- model_class = EvaluateCourse
.page-header
  %h1= t('exam.evaluate_course.title')#, :default => model_class.model_name.human.pluralize
  
.navbar.navbar-inverse{role: "navigation", style: "padding-right:40px;"}
  %ul.nav.navbar-nav
    - permitted_to? :create, :exam_evaluate_courses do
      %li= link_to content_tag(:li, fa_icon("asterisk", text: (t 'actions.new'))), new_exam_evaluate_course_path
  %ul.nav.navbar-nav.navbar-right
    %li.toga= link_to content_tag(:li, fa_icon("search", text: (t 'actions.search'))), "#", class: 'index_search_bar'
    - permitted_to? :evaluation_report, :exam_evaluate_courses do
      %li.dropdown
        %a.dropdown-toggle{"data-toggle" => "dropdown", :href => "#"}
          = fa_icon "print", text: (t 'actions.print')
          %b.caret
        %ul.dropdown-menu
          %li= link_to  (fa_icon "file-pdf-o", text: (t 'document.generate_report')), evaluation_report_exam_evaluate_courses_path(params.merge(format: 'pdf' ))
.row 
  %table.table-striped.table-hover.ogma
    %thead
      %tr
        - if current_user.college.code=="amsas"
          %th= sort_link(@search, :studentevaluate_name_cont, (t 'exam.evaluate_course.student_id'))
          %th{width: '30%'}= (t 'exam.evaluate_course.staff_id')+" - "+(t 'exam.evaluate_course.subject_id')
        - if current_user.college.code=="kskbjb"
          %th= (t 'exam.evaluate_course.programme_subject')
        %th{width: '50%'}= sort_link(@search, :evaluate_date_eq, (t 'exam.evaluate_course.evaluate_date'))
        - if current_user.college.code=="kskbjb"
          %th= sort_link(@search, :staffevaluate_name_cont, (t 'exam.evaluate_course.staff_id'))

    %tbody
      = render "search_bar"
      - @evaluate_courses.group_by(&:subject_id).each do |subject, all_evaluations|  
        - all_evaluations.group_by(&:staff_id).sort.each do |lecturer, evaluations|
          - if lecturer
            - if current_user.college.code=="amsas"
              %tr
                %td.group{:colspan => "3"}
                  =Staff.find(lecturer).try(:staff_with_rank)+" | "+(evaluations.first.stucourse.programme_list+" - " +(evaluations.first.subject_id.blank? ? (t 'exam.evaluate_course.invite_lec_topic')+" : "+evaluations.first.invite_lec_topic : evaluations.first.subjectevaluate.subject_list))
                  - analysis=AverageCourse.where(subject_id: evaluations.first.subject_id).where(lecturer_id: lecturer)
                  |
                  - if analysis.count==0
                    = link_to (t 'exam.average_course.analyse_average_data'), new_exam_average_course_path(subject_id: evaluations.first.subject_id, lecturer_id: lecturer)
                  - else
                    = link_to (t 'exam.average_course.view_analysis_data'), exam_average_course_path(analysis.first)
    
            - for evaluate_course in evaluations
              %tr
                - if current_user.college.code=="amsas"
                  %td{:colspan=>"2"}= link_to evaluate_course.studentevaluate.try(:student_with_rank), exam_evaluate_course_path(evaluate_course)
                - if current_user.college.code=="kskbjb"
                  /%td= evaluate_course.student_id.blank? ? "No Student" : evaluate_course.studentevaluate.try(:matrix_name)
                  /%td= link_to (evaluate_course.stucourse.programme_coursetype_name+" - " +(evaluate_course.subject_id.blank? ? (t 'exam.evaluate_course.invite_lec_topic')+" : "+evaluate_course.invite_lec_topic : evaluate_course.subjectevaluate.subject_list)), exam_evaluate_course_path(evaluate_course)
                  %td= link_to (evaluate_course.stucourse.programme_coursetype_name+" - "+evaluate_course.subjectevaluate.subject_list), exam_evaluate_course_path(evaluate_course)
                %td= evaluate_course.evaluate_date.blank? ? "-" : evaluate_course.evaluate_date.try(:strftime, "%d %b %Y") 
                - if current_user.college.code=="kskbjb"
                  %td=h evaluate_course.staff_id.blank? ? (t 'exam.evaluate_course.no_staff')+evaluate_course.invite_lec : evaluate_course.staffevaluate.try(:staff_with_rank)

        
      - @evaluate_courses.group_by(&:invite_lec_topic).each do |topic, all_evaluations|
        - all_evaluations.group_by(&:invite_lec).each do |invite_lec, evaluations|
          - if invite_lec!=""
            - if current_user.college.code=="amsas"
              %tr
                / TODO - 15Aug2016 - average score for invitation lecturer - require registration of lecturer & topic? to ensure precise data selection?
                %td.group{:colspan => "3"}=(t 'exam.evaluate_course.invite_lec')+": "+invite_lec+" | "+topic
            - for evaluate_course in evaluations
              %tr
                - if current_user.college.code=="amsas"
                  %td{:colspan=>"2"}=link_to evaluate_course.studentevaluate.try(:student_with_rank), exam_evaluate_course_path(evaluate_course)
                - if current_user.college.code=="kskbjb"
                  %td=link_to topic, exam_evaluate_course_path(evaluate_course)
                %td=evaluate_course.evaluate_date.blank? ? "-" : evaluate_course.evaluate_date.try(:strftime, "%d %b %Y") 
                - if current_user.college.code=="kskbjb"
                  %td=evaluate_course.invite_lec_topic
          
  .right{style:"padding:0 30px; margin:0;"}= paginate @evaluate_courses, :theme => 'twitter-bootstrap-3'
