/ .col-md-10
/   - permitted_to? :analysis_data, :exam_examanalyses do
/     = link_to t('actions.download_excel'), analysis_data_exam_examanalyses_path(exam_id: @examanalysis.exam_id , format: 'xls')
/     = link_to (fa_icon "file-excel-o"), analysis_data_exam_examanalyses_path(exam_id: @examanalysis.exam_id , format: 'xls')
/   
/   - paper=@examanalysis.exampaper
/       
/   %dl.dl-horizontal
/     %dt= t 'exam.exams.course_id'
/     %dd=h paper.subject_id? ? paper.subject.root.course_type+" "+paper.subject.root.name : "" 
/     
/     %dt= t 'exam.exams.subject_id'
/     %dd=h paper.subject_id? ? paper.subject.subject_list : ""
/       
/     %dt=t 'exam.exams.semester'
/     %dd= (t 'exam.exams.year')+paper.set_year+", "+(t 'exam.exams.semester')+paper.set_semester
/     
/     %dt=t 'training.academic_session.title'
/     %dd=paper.sesi_data
/     
/     - intake=Exammark.set_intake_group(paper.exam_on.year, paper.exam_on.month, paper.subject.parent.code,@current_user).to_date
/     %dt=t 'exam.exammark.intake'
/     %dd=intake.try(:strftime, '%b %Y')
/     
/     %dt= t 'exam.examanalysis.final_exam'
/     %dd
/       - if permitted_to? :read, :exam_exams
/         =link_to paper.exam_name_subject_date, exam_exam_path(@examanalysis.exam_id)
/       - else
/         =paper.exam_name_subject_date
/      
/       
/     
/   %br
/     - exammarks=paper.exammarks
/     - students=Student.where(id: exammarks.pluck(:student_id))
/     - student_intake=students[0].intake
/     - student_programme=students[0].course_id
/     - other_students_ids=Student.where(intake: student_intake, course_id: student_programme).pluck(:id)
/     - subjectid=paper.subject_id
/     /Absent data - must be within same intake & programme
/     - absent_grades=Grade.where(subject_id: subjectid).where(student_id: other_students_ids).where.not(student_id: students)
/     - absent_exammark_exist=[]
/     - exammarks.each do |exammark|
/       - if exammark.total_marks==0 || exammark.totalsummative==0
/         - absent_exammark_exist << exammark
/       
/     /Formative Full marks = total formative weightage, Summative Marks
/     - onegrade=Grade.where(student_id: students[0].id).where(subject_id: subjectid).first
/     - formative_weightage=onegrade.scores.sum(:weightage)
/     - mid_formative=formative_weightage/2.0
/     - summative_weightage=onegrade.examweight
/     - mid_summative=summative_weightage/2.0
/     
/     /Final Full marks (exam.total_marks != exammark.total_marks)
/     - finalmarks_full=paper.total_marks
/     - mid_finalmarks=finalmarks_full/2.0
/     - mid_finalscores=100/2.0
/     - qcount=[]
/     - qrate=[]
/     - qfullmarks=[]
/     - qmarks_ea=[]
/     - qtype=[]
/ 
/     - paper.exam_template.question_count.each do |k,v|
/       - qtype << k if v["count"]!=''
/       /- qcount << v["count"].to_i
/       - if v["weight"]!='' && v["count"]!=''
/         - if v["full_marks"] && v["full_marks"]!='' 
/           /- qrate << v["weight"].to_f / v["full_marks"].to_f
/           - qmarks_ea << v["full_marks"].to_f / v["count"].to_i
/           - qfullmarks << v["full_marks"].to_f
/           - qcount << v["count"].to_i
/         - else
/           //when full marks not exist, use STANDARD MARKS as below : pls note - applicable to MCQ, MEQ & SEQ only
/           - if k=="mcq"
/             /- qrate << v["weight"].to_f / v["count"].to_i*1 
/             - qmarks_ea << 1 
/             - qfullmarks << v["count"].to_i*1 
/             - qcount << v["count"].to_i
/           - elsif k=="seq" 
/             /- qrate << v["weight"].to_f / (v["count"].to_i*10)
/             - qmarks_ea << 10
/             - qfullmarks << (v["count"].to_i*10)
/             - qcount << v["count"].to_i
/           - elsif k=="meq"
/             /- qrate << v["weight"].to_f / (v["count"].to_i*20)
/             - qmarks_ea << 20
/             - qfullmarks << (v["count"].to_i*20)
/             - qcount << v["count"].to_i
/           - else
/             /assume 1 for marks for ea question
/             /- qrate << v["weight"].to_f / v["count"].to_i
/             - qmarks_ea << 1
/             - qfullmarks <<  v["count"].to_i
/             - qcount << v["count"].to_i
/       - elsif  v["weight"]=='' && v["count"]!=''
/         //when weightage not exist, but count exist
/         - qrate << 0
/         - if k=="mcq"
/           - qmarks_ea << 1 
/           - qfullmarks << v["count"].to_i*1 
/           - qcount << v["count"].to_i
/         - elsif k=="seq"
/           - qmarks_ea << 10
/           - qfullmarks << v["count"].to_i*10
/           - qcount << v["count"].to_i
/         - elsif k=="meq"
/           - qmarks_ea << 20
/           - qfullmarks << v["count"].to_i*20
/           - qcount << v["count"].to_i
/         - else
/           /assume 1 for marks for ea question
/           - qmarks_ea << 1
/           - qfullmarks << v["count"].to_i*1 
/           - qcount << v["count"].to_i
/       - else
/         /- qrate << 0 if v["count"]!=''
/         - qmarks_ea << 1 if v["count"]!=''
/         - qcount << v["count"].to_i if v["count"]!=''
/     
/     /=qtype
/     /=qcount
/     /=qmarks_ea
/     - @mcq_count= qcount[0]
/     - @meq_count= qcount[1]
/     - @seq_count=qcount[2]  
/     - @acq_count=qcount[3]
/     - @osci_count=qcount[4]
/     - @oscii_count=qcount[5]
/     - @osce_count=qcount[6]
/     - @ospe_count=qcount[7]
/     - @viva_count=qcount[8]
/     - @truefalse_count=qcount[9]
/ 
/     - total_questions = qcount.sum
/     - total_mcq_questions=0
/     - paper.exam_template.question_count.each{|k,v|total_mcq_questions=v['count'].to_i if k=="mcq"}
/     - total_nonmcq_questions=total_questions - total_mcq_questions
/     - questionstype=qtype
/     - questionstype_count = qtype.count
/          
/     /%table.table.table-bordered
/     %table.table-striped.table-hover.ogma
/       %thead
/         /HEADING - line 1
/         %tr
/           %th{rowspan: 2} No
/           %th{rowspan: 2}=t 'student.students.name'
/           %th{rowspan: 2}=t 'student.students.matrixno'
/           %th{rowspan: 2}=t 'student.students.icno'
/           %th.centre{rowspan: 2} 
/             CA+MSE
/             \/
/             =t 'exam.examanalysis.formative'
/             .small=formative_weightage.to_s+"%"
/           - if questionstype.include?('mcq')
/             %th.centre{rowspan: 2} 
/               MCQ
/               .small=qfullmarks[0]
/           / NOTE - 0 index is MCQ & qtype includes MCQ type
/           - 1.upto(qtype.count-1).each do |x|
/             %th.centre{colspan: "#{qcount[x]}"}=qtype[x].upcase
/           /- if @meq_count > 0
/           /  %th.centre{colspan: "#{@meq_count}"}MEQ
/           /- if @seq_count > 0
/           /  %th.centre{colspan: "#{@seq_count}"}SEQ 
/           /- if @acq_count > 0
/           /  %th.centre{colspan: "#{@acq_count}"}ACQ 
/           /- if @osci_count > 0
/           /  %th.centre{colspan: "#{@osci_count}"}OSCI 
/           /- if @oscii_count > 0
/           /  %th.centre{colspan: "#{@oscii_count}"}OSCII 
/           /- if @osce_count > 0
/           /  %th.centre{colspan: "#{@osce_count}"}OSCE 
/           /- if @ospe_count > 0
/           /  %th.centre{colspan: "#{@ospe_count}"}OSPE 
/           /- if @viva_count > 0
/           /  %th.centre{colspan: "#{@viva_count}"}VIVA 
/           /- if @truefalse_count > 0
/           /  %th.centre{colspan: "#{@truefalse_count}"}TRUE FALSE
/           %th.centre{rowspan: 2}
/             =t 'exam.examanalysis.final_exam' 
/             .small=summative_weightage.to_s+"%"
/           %th.centre{rowspan: 2}
/             =t 'exam.examanalysis.final_score'
/             .small=(formative_weightage+summative_weightage).to_s+"%"
/           %th.centre{rowspan: 2}=t 'exam.examanalysis.grade'
/           %th.centre{rowspan: 2} NG
/         /HEADING - line 2  
/         %tr
/           / NOTE - 0 index is MCQ & qtype includes MCQ type
/           - 1.upto(qtype.count-1).each do |x|
/             - 1.upto(qcount[x]).each do |y|
/               %th.centre
/                 ="Q"+y.to_s
/                 .small=qmarks_ea[x]
/           /- if @meq_count > 0
/           /  - 1.upto(@meq_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @seq_count > 0
/           /  - 1.upto(@seq_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @acq_count > 0
/           /  - 1.upto(@acq_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @osci_count > 0
/           /  - 1.upto(@osci_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @oscii_count > 0
/           /  - 1.upto(@oscii_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @osce_count > 0
/           /  - 1.upto(@osce_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @ospe_count > 0
/           /  - 1.upto(@ospe_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @viva_count > 0
/           /  - 1.upto(@viva_count).each do |y|
/           /    %th.centre="Q"+y.to_s
/           /- if @truefalse_count > 0
/           /  - 1.upto(@truefalse_count).each do |y|
/           /    %th="Q"+y.to_s
/       %tbody 
/       - bil=0
/       - marks_by_students=[]
/       - formatives=[]
/       - mcqs=[]
/       - finalmarks=[]
/       - finalscores=[]
/       - ngs=[]
/       - for student in students.sort_by{|x|[x.id, x.name]}    
/         %tr
/           %td=bil+=1
/           %td=student.name
/           %td=student.matrixno
/           %td=student.icno
/           - total_formative=Grade.where(student_id: student.id).where(subject_id: subjectid).first.formative
/           - formatives << total_formative.to_f
/           %td=number_with_precision(total_formative, precision: 2)
/           - total_mcq=exammarks.where(student_id: student.id).first.total_mcq
/           - mcqs << total_mcq.to_f
/           %td=number_with_precision(total_mcq, precision: 2)
/           - marks_line_per_student=exammarks.where(student_id: student.id).first.marks.order(created_at: :asc)
/           - marks_by_students << marks_line_per_student.pluck(:student_mark)
/           - marks_line_per_student.sort_by{|x|x.created_at}.each_with_index do |aa, index|
/             %td=number_with_precision(aa.student_mark.to_f, precision: 2)
/           %td=summative=number_with_precision(Grade.where(student_id: student.id).where(subject_id: subjectid).first.summative, precision: 2)
/           %td=finalscore=number_with_precision(Grade.where(student_id: student.id).where(subject_id: subjectid).first.finalscore, precision: 2)
/           %td=Grade.where(student_id: student.id).where(subject_id: subjectid).first.render_grading[-2,2]
/           %td=ng=number_with_precision(Grade.where(student_id: student.id).where(subject_id: subjectid).first.set_NG, precision: 2)
/         / NOTE - exam1marks is total marks of FINAL exampaper, summative - ?  
/         - finalmarks << summative.to_f
/         - finalscores << finalscore.to_f
/         - ngs << ng.to_f
/   
/       /rearrange, group student marks by questions
/       - marks_by_questions=[]
/       - 0.upto(total_nonmcq_questions-1).each do |count|
/         - arr=[]
/         - marks_by_students.each do |studentmark|
/           - arr << studentmark[count].to_f
/         - marks_by_questions << arr
/       /=marks_by_questions  
/       
/       /=marks_by_students[0][0]
/       /=marks_by_students[1][0]
/       /=marks_by_students[2][0]
/       /=marks_by_students[3][0]
/       
/       /Absent Student (Final Exam) - Grade MUST EXIST & Exammark no need to exist, even if exist (due to Create Multiple), MUST be exammark.totalsummative==0 || exammark.total_marks==0, to be considered as ABSENT
/       - absent_formatives=[]
/       - present_formatives=[]
/       - absent_exammarks=[]
/       - absent_final_scores=[]
/       - absent_gradings=[]
/       - absent_ngs=[]
/       - if absent_exammark_exist.count > 0 || absent_grades.count > 0
/         - for grade in absent_grades
/           %tr
/             %td{style: "color: #FE2E64;"}=bil+=1
/             %td{style: "color: #FE2E64;"}=grade.studentgrade.name
/             %td{style: "color: #FE2E64;"}=grade.studentgrade.matrixno
/             %td{style: "color: #FE2E64;"}=grade.studentgrade.icno
/             %td{style: "color: #FE2E64;"}=absent_formative=number_with_precision(grade.scores.sum(:marks), precision:2)
/             - if absent_exammark_exist.map(&:student_id).include?(grade.student_id)
/               /exammarks & grade exist
/               - mcqmarks=0.00
/               - othermarks=0.00
/               - finalmarks=0.00
/             - else
/               /only grade exist
/               - mcqmarks="-"
/               - othermarks="-"
/               - finalpapermarks="-"
/             %td{style: "color: #FE2E64;"}=mcqmarks
/             - 0.upto(total_nonmcq_questions-1).each do |x|
/               %td{style: "color: #FE2E64;"}=othermarks
/             %td{style: "color: #FE2E64;"}=finalpapermarks
/ 
/             %td{style: "color: #FE2E64;"}=absent_final_score=number_with_precision(grade.finalscore, precision: 2)
/             %td{style: "color: #FE2E64;"}=absent_grading=grade.render_grading[-2,2]
/             %td{style: "color: #FE2E64;"}=absent_ng=number_with_precision(grade.set_NG, precision: 2)
/             - if absent_formative.to_f > 0
/               - present_formatives << absent_formative 
/             - else
/               - absent_formatives << absent_formative
/             - absent_exammarks << 0
/             - absent_final_scores << absent_final_score
/             - absent_gradings << absent_grading
/             - absent_ngs << absent_ng
/             
/       /separator
/       %tr
/         %td{colspan: "#{4+2+marks_by_students[0].count+4}"}
/         
/       /checker 
/       %tr
/         %td{colspan: 3}
/         %th &nbsp;
/         %td=formatives
/         %td=mcqs
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=marks_by_questions[x]
/         %td=finalmarks
/         %td=finalscores
/         %td &nbsp;
/         %td=ngs
/         
/       /COUNT
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.count'
/         %td=total_candidates=formatives.count+absent_formatives.count+present_formatives.count
/         /Below : use standard absent_exammarks for ALL final paper related columns
/         %td=total_mcqs=mcqs.count+absent_exammarks.count
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=marks_by_questions[x].count+absent_exammarks.count
/         %td=finalmarks.count+absent_exammarks.count
/         /Above : & for both conditions : 1)Grade with Exammark exist 2) Grade w/o Exammark existance
/         %td=finalscores.count+absent_final_scores.count
/         %td &nbsp;
/         %td=ngs.count+absent_ngs.count
/       /ATTEND
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.attend'
/         %td=total_attendees=formatives.count+present_formatives.count
/         /exammarks section should not consist any absent data
/         %td=mcqs.count
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=marks_by_questions[x].count
/         %td=finalmarks.count
/         /exammarks section ended here
/         - if present_formatives.count > 0
/           - all_final_scores=finalscores.count+absent_final_scores.count
/           - all_ngs=ngs.count+absent_ngs.count
/         - else
/           - all_final_scores=finalscores.count
/           - all_ngs=ngs.count
/         %td=all_final_scores
/         %td &nbsp;
/         %td=all_ngs
/       /ABSENT
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.absent'
/         %td=total_candidates-total_attendees
/         /exammarks related
/         %td=total_candidates-mcqs.count
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=total_candidates-marks_by_questions[x].count
/         %td=total_candidates-finalmarks.count
/         /exammarks
/         %td=total_candidates-total_attendees
/         %td &nbsp;
/         %td=total_candidates-total_attendees
/       /MIN 
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.min'
/         %td=number_with_precision(formatives.min, precision:2)
/         %td=number_with_precision(mcqs.min, precision: 2)
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=number_with_precision(marks_by_questions[x].min, precision: 2)
/         %td=number_with_precision(finalmarks.min, precision:2)
/         %td=number_with_precision(finalscores.min,precision: 2)
/         %td &nbsp;
/         %td=number_with_precision(ngs.min, precision:2)
/       /MAX
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.max'
/         %td=number_with_precision(formatives.max, precision: 2)
/         %td=number_with_precision(mcqs.max, precision: 2)
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=number_with_precision(marks_by_questions[x].max, precision: 2)
/         %td=number_with_precision(finalmarks.max, precision: 2)
/         %td=number_with_precision(finalscores.max, precision: 2)
/         %td
/         %td=number_with_precision(ngs.max, precision: 2)
/ 
/       /separator
/       %tr
/         %td{colspan: "#{4+2+marks_by_students[0].count+4}"}
/         
/       /MEAN (AVERAGE)
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.average'
/         %td=number_with_precision(@examanalysis.average_data(formatives), precision: 2)
/         %td=number_with_precision(@examanalysis.average_data(mcqs), precision: 2)
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=number_with_precision(@examanalysis.average_data(marks_by_questions[x]), precision: 2)
/         %td=number_with_precision(@examanalysis.average_data(finalmarks), precision: 2)
/         %td=number_with_precision(@examanalysis.average_data(finalscores), precision: 2)
/         %td
/         %td=number_with_precision(@examanalysis.average_data(ngs), precision: 2)
/       /SD-Population / SD- Deviation
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.sd_deviation'
/         %td=number_with_precision(@examanalysis.standard_deviation(formatives), precision: 2)
/         %td=number_with_precision(@examanalysis.standard_deviation(mcqs), precision: 2)
/         - 0.upto(total_nonmcq_questions-1).each do |x|
/           %td=number_with_precision(@examanalysis.standard_deviation(marks_by_questions[x]), precision: 2)
/         %td=number_with_precision(@examanalysis.standard_deviation(finalmarks), precision: 2)
/         %td=number_with_precision(@examanalysis.standard_deviation(finalscores), precision: 2)
/         %td
/         %td=number_with_precision(@examanalysis.standard_deviation(ngs), precision: 2)
/       
/       /separator
/       %tr
/         %td{colspan: "#{4+2+marks_by_students[0].count+4}"}
/         
/       /Pass % -  Jumlah kelulusan (dr jumlah pelajar)
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.pass_rate'
/         %td= @examanalysis.pass_rate(formatives, mid_formative)
/         %td= @examanalysis.pass_rate(mcqs, qfullmarks[0]/2.0) 
/         - item=0
/         - 1.upto(qtype.count-1).each do |x|
/           - 1.upto(qcount[x]).each do |y|
/             %td
/               /marks ea :
/               /=qmarks_ea[x]
/               /scored marks :
/               /=marks_by_questions[item]
/               /pass rate :
/               =@examanalysis.pass_rate(marks_by_questions[item], qmarks_ea[x]/2.0)
/               - item+=1
/ 
/         %td=@examanalysis.pass_rate(finalmarks, mid_finalmarks)
/         %td=@examanalysis.pass_rate(finalscores, mid_finalscores)
/         %td
/         %td=@examanalysis.pass_rate(ngs, 2.00)
/         
/       /% Pass -  Peratus kelulusan (dr jumlah pelajar)
/       %tr
/         %td{colspan: 3}
/         %th=t 'exam.examanalysis.percent_pass'
/         %td=number_with_precision(@examanalysis.percent_pass(formatives, mid_formative), precision: 2)
/         %td=number_with_precision(@examanalysis.percent_pass(mcqs, qfullmarks[0]/2.0), precision: 2)
/         - item=0
/         - 1.upto(qtype.count-1).each do |x|
/           - 1.upto(qcount[x]).each do |y|
/             %td
/               - pass_rate=@examanalysis.pass_rate(marks_by_questions[item], qmarks_ea[x]/2.0)
/               - total_student=students.count
/               = number_with_precision(pass_rate/total_student.to_f*100.0, precision: 2)
/               - item+=1
/ 
/         %td=number_with_precision(@examanalysis.percent_pass(finalmarks, mid_finalmarks), precision: 2)
/         %td=number_with_precision(@examanalysis.percent_pass(finalscores, mid_finalscores), precision: 2)
/         %td
/         %td=number_with_precision(@examanalysis.percent_pass(ngs, 2.00), precision: 2)
/       
/       /separator
/       %tr
/         %td{colspan: "#{4+2+marks_by_students[0].count+4}"}
/         
/       /Marks=0 count per question
/       %tr
/         %td{colspan: 3}
/         %th.small=(t 'exam.examanalysis.marks')+' 0'
/         %td=@examanalysis.marks_zero(formatives)
/         %td=@examanalysis.marks_zero(mcqs)
/         - item=0
/         - 1.upto(qtype.count-1).each do |x|
/           - 1.upto(qcount[x]).each do |y|
/             %td=@examanalysis.marks_zero(marks_by_questions[item])
/             - item+=1
/         %th{rowspan: 11, style: "vertical-align: middle; text-align: center;"} GRED
/         %td.centre 
/           %b A 
/           %font{color: "grey", size: "-2"} (>80)
/         %th.centre 4.00
/         %td.centre=@examanalysis.a_count(ngs)
/         
/       /Marks < 20% per question
/       %tr
/         %td{colspan: 3}
/         %th.small=(t 'exam.examanalysis.marks')+' < 20%'
/         %td=@examanalysis.marks_20percent(formatives, formative_weightage) 
/         %td=@examanalysis.marks_20percent(mcqs, qcount[0])
/         - item=0
/         - 1.upto(qtype.count-1).each do |x|
/           - 1.upto(qcount[x]).each do |y|
/             %td=@examanalysis.marks_20percent(marks_by_questions[item], qmarks_ea[x])
/             - item+=1
/         /%td GRED
/         %td.centre
/           %b A-
/           %font{color: "grey", size: "-2"} (75-79)
/           /(>=75)
/         %th.centre 3.67
/         %td.centre=@examanalysis.a_minus_count(ngs)
/ 
/       /Marks < 50% per question
/       %tr
/         %td{colspan: 3}
/         %th.small=(t 'exam.examanalysis.marks')+' < 50%'
/         %td=@examanalysis.marks_50percent(formatives, formative_weightage) 
/         %td=@examanalysis.marks_50percent(mcqs, qcount[0])
/         - item=0
/         - 1.upto(qtype.count-1).each do |x|
/           - 1.upto(qcount[x]).each do |y|
/             %td=@examanalysis.marks_50percent(marks_by_questions[item], qmarks_ea[x])
/             - item+=1
/         /%td GRED
/         %td.centre
/           %b B+
/           %font{color: "grey", size: "-2"} (70-74)
/           /(>=70)
/         %th.centre 3.33
/         %td.centre=@examanalysis.b_plus_count(ngs)
/ 
/       /Marks <=80% per question
/       %tr
/         %td{colspan: 3}
/         %th.small=(t 'exam.examanalysis.marks')+' <= 80%'
/         %td=@examanalysis.marks_less80percent(formatives, formative_weightage)
/         %td=@examanalysis.marks_less80percent(mcqs, qcount[0])
/         - item=0
/         - 1.upto(qtype.count-1).each do |x|
/           - 1.upto(qcount[x]).each do |y|
/             %td=@examanalysis.marks_less80percent(marks_by_questions[item], qmarks_ea[x])
/             - item+=1
/         /%td GRED
/         %td.centre
/           %b B
/           %font{color: "grey", size: "-2"} (65-69)
/           /(>=65)
/         %th.centre 3.00
/         %td.centre=@examanalysis.b_count(ngs)
/         
/       /Marks > 80% per question
/       %tr
/         %td{colspan: 3}
/         %th.small=(t 'exam.examanalysis.marks')+' > 80%'
/         %td=@examanalysis.marks_80abovepercent(formatives, formative_weightage) 
/         %td=@examanalysis.marks_80abovepercent(mcqs, qcount[0])
/         - item=0
/         - 1.upto(qtype.count-1).each do |x|
/           - 1.upto(qcount[x]).each do |y|
/             %td=@examanalysis.marks_80abovepercent(marks_by_questions[item], qmarks_ea[x])
/             - item+=1
/         /%td GRED
/         %td.centre
/           %b B-
/           %font{color: "grey", size: "-2"} (60-64)
/           /(>=60)
/         %th.centre 2.67
/         %td.centre=@examanalysis.b_minus_count(ngs)
/ 
/       /GRADING ONLY
/       %tr
/         %td{colspan: "#{6+total_nonmcq_questions}"}
/         %td.centre
/           %b C+
/           %font{color: "grey", size: "-2"} (55-59)
/           /(>=55)
/         %th.centre 2.33
/         %td.centre=@examanalysis.c_plus_count(ngs)
/       %tr
/         %td{colspan: "#{6+total_nonmcq_questions}"}
/         %td.centre
/           %b C
/           %font{color: "grey", size: "-2"} (50-54)
/           /(>=50)
/         %th.centre 2.00
/         %td.centre=@examanalysis.c_count(ngs)
/       %tr
/         %td{colspan: "#{6+total_nonmcq_questions}"}
/         %td.centre
/           %b C-
/           %font{color: "grey", size: "-2"} (45-49)
/           /(>=45)
/         %th.centre 1.67
/         %td.centre=@examanalysis.c_minus_count(ngs)
/       %tr
/         %td{colspan: "#{6+total_nonmcq_questions}"}
/         %td.centre
/           %b D+
/           %font{color: "grey", size: "-2"} (40-44)
/           /(>=40)
/         %th.centre 1.33
/         %td.centre=@examanalysis.d_plus_count(ngs)
/       %tr
/         %td{colspan: "#{6+total_nonmcq_questions}"}
/         %td.centre
/           %b D
/           %font{color: "grey", size: "-2"} (35-39)
/           /(>=35)
/         %th.centre 1.00
/         %td.centre=@examanalysis.d_count(ngs)
/       %tr
/         %td{colspan: "#{6+total_nonmcq_questions}"}
/         %td.centre
/           %b E
/           %font{color: "grey", size: "-2"} (<35)
/         %th.centre 0.00
/         %td.centre=@examanalysis.e_count(ngs)
/ 
/ - @formatives=formatives
/ - @mcqs=mcqs
/ - @ngs=ngs
/ - @qmarks_ea=qmarks_ea
/ - @qtype=qtype
/ - @qcount=qcount
/ - @marks_by_questions=marks_by_questions
/ - @formative_weightage=formative_weightage
/ - @total_nonmcq_questions=total_nonmcq_questions
/     
/         
/ /Fisioterapi - MCQ count not exactly 40 but total MCQ will be converted into weightage of 40% - note this card : https://trello.com/c/A4OyDJkv -- sama dgn pem peg perubatan
/ /Cara Kerja - MCQ - fix 40 questions - 40%
/ /Pem Pegawai Perubatan - MCQ count 60 - weightage 40% - this card : https://trello.com/c/CzOlHCnM  -- sama dgn fisioterapi
/ /Radiografi -     J= (MCQ+SEQ)/(total mcq+total seq) * 100  -> J/100 * 70                Note - [total mcq+total seq < 100]
/ /                       (MCQ+SEQ)/(total mcq+total seq)  * 100 ->  (MCQ+SEQ)/(total mcq+total seq)  * 70              Note - [total mcq+total seq > 100]
/ 
/ /TODO-DONE - to check grades - for all programmes - 70% - 100% calculation - summative -
/ /Pem Peg Perubatan - tiada 100% for summative value -> 40% (mcq) +meq(30%) -terus dapat 70% 
/ /Fisioterapi - sda - -> 40% (MCQ/100*40)+ 30% (MEQ/total meq*30) - terus dapat 70%
/ /Radiografi -     J= (MCQ+SEQ)/(total mcq+total seq) * 100  -> J/100 * 70                Note - [total mcq+total seq < 100]
/ /                       (MCQ+SEQ)/(total mcq+total seq)  * 100 ->  (MCQ+SEQ)/(total mcq+total seq)  * 70              Note - [total mcq+total seq > 100]
/ /Cara Kerja - Final Exam=(MCQ+SEQ)/(total mcq+total seq),   Total marks = Formative(30%)+(Final Exam*0.70)
/ /Pos Basik(KEbidanan) - Summative(60%) : 40%(MCQ) +(MEQ/total meq * 20%)=60%,    JUMLAH BESAR = Formative(40%)+Summative(60%)
/ 
/ /***Radiografi & cara Kerja- je yg ade 100% - 70%