- model_class = Examanalysis
.page-header
  %h1= t('exam.examanalysis.title')#, :default => model_class.model_name.human.pluralize
.navbar.navbar-inverse{role: "navigation", style: "padding-right:40px;"}
  %ul.nav.navbar-nav
    /HACK - restrict common_subjects lecturers - still accessible via direct url
    /- unless @common_subjects.include?(@current_user.userable.positions[0].unit)
    - permitted_to? :create, :exam_examanalyses do
      %li= link_to content_tag(:li, fa_icon("asterisk", text: (t 'actions.new'))), new_exam_examanalysis_path
  %ul.nav.navbar-nav.navbar-right
    %li.toga= link_to content_tag(:li, fa_icon("search", text: (t 'actions.search'))), "#", class: "index_search_bar"
    %li.toga= link_to content_tag(:li, fa_icon("print", text: (t 'actions.print'))), "#", class: 'bogus'  

= render 'shared/flashes'
.row
  %table.table-striped.table-hover.ogma
    %thead
      %tr
        %th=sort_link(@search, :exampaper_subject_id, (t 'exam.examanalysis.subject_id'))
        %th=sort_link(@search, :exampaper_exam_on, (t 'exam.examanalysis.exam_on'))
        %th=t('exam.examanalysis.examtype')
        - if current_user.college.code =="kskbjb"
          %th=t('exam.exam.examanalysis.grade')+" A"
          %th=t('exam.exam.examanalysis.grade')+" A-"
          %th=t('exam.examanalysis.grade')+" B+"
          %th=t('exam.examanalysis.grade')+" B"
          %th=t('exam.examanalysis.grade')+" B-"
          %th=t('exam.examanalysis.grade')+" C+"
          %th=t('exam.examanalysis.grade')+" C"
          %th=t('exam.examanalysis.grade')+" C-"
          %th=t('exam.examanalysis.grade')+" D+"
          %th=t('exam.examanalysis.grade')+" D"
          %th=t('exam.examanalysis.grade')+" E"
        - else
          %th=t('exam.examresult.passed')
          %th=t('exam.examresult.failed')

    %tbody
      = render "search_bar"
      - @examanalyses.group_by{|x|x.exampaper.subject.root_id}.each do |programme_id, examanalyses|
        - if @is_admin
          %tr
            %td.group{colspan: 14}
              %span= Programme.where(id: programme_id).first.programme_list
        - for examanalysis in examanalyses.sort_by{|x|x.exampaper.exam_on}
          %tr
            %td= link_to examanalysis.exampaper.subject.subject_list, exam_examanalysis_path(examanalysis)
            %td=h l(examanalysis.exampaper.exam_on, :format => "%d %b %Y") 
            %td
              =h examanalysis.exampaper.render_examtype[0]
              - if examanalysis.exampaper.klass_id==1
                %font{color: "blue"}=t('exam.exams.with_questions')
            - if current_user.college.code=="kskbjb"
              %td=h examanalysis.gradeA 
              %td=h examanalysis.gradeAminus
              %td=h examanalysis.gradeBplus 
              %td=h examanalysis.gradeB 
              %td=h examanalysis.gradeBminus
              %td=h examanalysis.gradeCplus 
              %td=h examanalysis.gradeC
              %td=h examanalysis.gradeCminus 
              %td=h examanalysis.gradeDplus
              %td=h examanalysis.gradeD 
              %td=h examanalysis.gradeE 
            - else 
              - exammarks=examanalysis.exampaper.exammarks
              - subjectid=examanalysis.exampaper.subject_id
              - students=Student.where(id: exammarks.pluck(:student_id))
              - finalscores=[]
              - students.each{|x|finalscores << Grade.where(student_id: x.id).where(subject_id: subjectid).first.finalscore}
              - passed=[]
              - failed=[]
              - finalscores.each{|y|passed << y if y>=50}
              - finalscores.each{|z|failed << z if z < 50}
              %td=passed.count
              %td=failed.count
  
  .right{style:"padding:0 30px; margin:0;"}= paginate @examanalyses, :theme => 'twitter-bootstrap-3'


    
    
    
