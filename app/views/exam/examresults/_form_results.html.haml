/ - model_class = Exam
/ .col-md-11
/   %hr  
/   %table.table.table-bordered
/     %head
/       %tr
/         %th{rowspan: 2} &nbsp;
/         %th{rowspan: 2}=t('student.name')
/         %th{rowspan: 2}=t('student.students.matrixno')
/         %th{rowspan: 2}=t('student.icno')
/         /- kebidanan = Programme.roots.where('name ILIKE(?)', '%Kebidanan%').first.id
/         - posbasiks = Programme.roots.where(course_type: ['Pos Basik', 'Diploma Lanjutan', 'Pengkhususan']).pluck(:id)
/         - kejururawatan = Programme.roots.where('name ILIKE(?)', '%Kejururawatan%').first.id
/         - perubatan=Programme.where(course_type: 'Diploma').where('name ILIKE (?)', 'Penolong Pegawai Perubatan').first.id
/         - radiografi=Programme.where(course_type: 'Diploma').where('name ILIKE (?)', 'Radiografi').first.id
/         /- @subjects = Examresult.get_subjects(@examresult.programme_id,@examresult.semester)
/         - @subjects = @examresult.retrieve_subject
/         - @students = @examresult.retrieve_student
/         - @subject_credits=[]
/         - for subject in @subjects
/           - @subject_credits << subject.credits
/           %th.centre{colspan: 2}=h subject.code
/         %th.centre{rowspan: 2}= t 'exam.examresult.total_grade_point' 
/         %th.centre{rowspan: 2}= t 'exam.examresult.gpa2'
/         %th.centre{rowspan: 2}= t 'exam.examresult.cgpa2'
/         %th.centre{rowspan: 2} Status
/         %th.centre{rowspan: 2}= t 'exam.examresult.remark'
/       %tr
/         - 0.upto(@subjects.count-1) do |count|
/           %th=t('exam.grade.grading_id')
/           %th NG
/     %body
/       /- @nos=0
/       /= f.fields_for :resultlines do |builder|
/       /  - @nos+=1
/       /  = render 'resultline_fields', {:f => builder, :nos => @nos}
/       /- if @students.count > 0 && @examresult.resultlines.count==0 && @examresult.errors.count==0
/       
/       /BELOW - will display fields successfully
/       - if @students.count > 0 
/         - 0.upto(@students.count-1).each do |no|
/           %tr
/             %td=no+1
/             /maintan entered values, although errors arise
/             - if @examresult.resultlines
/               /.count > 0
/               - @value_state=[]
/               - @value_state2=[]
/               - @final_marks=[]
/               - @repeat_marks=[]
/               /- @value_status = @examresult.resultlines[no].status if @examresult.resultlines[no]
/               - @value_status = []
/               - @value_remark = @examresult.resultlines[no].remark if @examresult.resultlines[no]
/               - @value_id = @examresult.resultlines[no].id if @examresult.resultlines[no]
/               - @value_pngk = @examresult.resultlines[no].pngk if @examresult.resultlines[no]
/             
/             = hidden_field "examresult[resultlines_attributes][#{no}]", :id, :size =>8, :value=>@value_id
/             = hidden_field "examresult[resultlines_attributes][#{no}]", :student_id, :size =>8, :value=>@students[no].id
/             %td=@students[no].name
/             %td=@students[no].matrixno
/             %td=@students[no].icno
/             
/             - unless @subjects.nil? || @subjects.blank? 
/               - credit2_all=[]
/               - final2_all=[] 
/               - final2b_all=[]
/               - final_all=[]
/               - english_subjects=['PTEN', 'NELA', 'NELB', 'NELC', 'MAPE', 'XBRE', 'OTEL'] 
/               /below : when repeated exist
/               - for subject in @subjects
/                 - @grade_student=Grade.where(subject_id: subject.id).where(student_id: @students[no].id)
/                 - @student_finale=Grade.where('student_id=? and subject_id=?', @students[no].id,subject.id).first
/                 
/                 /retrieve & sum-up Credit Hours for all subject except for English subject (TODO-confirm if elective & minor are of the same case?)
/                 /16Dec2015-Pn Manicka Valli - latest - Pos Basics module code - ADCB 510102 - credit=2
/                 /- if subject.code.size >9
/                 /  - unless english_subjects.include?(subject.code[0,4]) || (subject.code.strip.size < 10 && (subject.code.strip[-2,1].to_i==2 || subject.code.strip[-2,1].to_i==3))
/                 /    - credit2_all << subject.code[10,1].to_i 
/                 /- elsif subject.code.size < 10
/                 /  - unless english_subjects.include?(subject.code[0,4]) || (subject.code.strip.size < 10 && (subject.code.strip[-2,1].to_i==2 || subject.code.strip[-2,1].to_i==3)) 
/                 /    - credit2_all << subject.code[-1,1].to_i
/                 - unless english_subjects.include?(subject.code[0,4]) || (subject.code.strip.size < 10 && (subject.code.strip[-2,1].to_i==2 || subject.code.strip[-2,1].to_i==3)) 
/                   - credit2_all << subject.code[-1,1].to_i
/                   - unless @student_finale.nil? || @student_finale.blank? 
/                     - final_all << @student_finale.set_NG.to_f
/                   - else
/                     - final_all << 0.00
/ 
/                 /For NON-English subjects :-
/                 - unless english_subjects.include?(subject.code[0,4]) || (subject.code.strip.size < 10 && (subject.code.strip[-2,1].to_i==2 || subject.code.strip[-2,1].to_i==3))
/                   
/                   /Final : Retrieve NGs (final2_all)
/                   /Repeat : Retrieve NGs+NG2s (final2b_all) & subjects repeated
/                   - unless @student_finale.nil? || @student_finale.blank? 
/                     /when grade exist
/                     - unless (@grade_student.first.exam2marks.nil? || @grade_student.first.exam2marks.blank?) 
/                       - if @grade_student.first.resit==true
/                         /Repeat : step1- retrieve latest NG & subject
/                         - final2b_all << @student_finale.set_NG2.to_f
/                     - else
/                       - final2_all << @student_finale.set_NG.to_f
/                       /Repeat : step2-collect those not repeated too
/                       - final2b_all << @student_finale.set_NG.to_f
/                   - else
/                     /when grade not exist
/                     - final2_all << 0.00
/                   
/                 /Display subjects results column accordingly-----------------------
/                 /Case 1:Grade exist
/                 - if @grade_student.count > 0
/                   - @gradeit=@grade_student.first.render_grading[-2,2]
/                   - if english_subjects.include?(subject.code[0,4]) || (subject.code.strip.size < 10 && (subject.code.strip[-2,1].to_i==2 || subject.code.strip[-2,1].to_i==3))
/                     /English subjects column-start
/                     %td.centre{colspan: 2}
/                       - if ["C-", "D+", "D", "E"].include?(@gradeit.strip)==true
/                         %font{color: "red"}=(t 'exam.examresult.failed')
/                         - @value_state << '4'
/                         - state='4'
/                       - else 
/                         =(t 'exam.examresult.passed')
/                         - @value_state << '3'
/                         - state='3'
/                       //repeat for english papers
/                       - unless (@grade_student.first.exam2marks.nil? || @grade_student.first.exam2marks.blank?) 
/                         - if @grade_student.first.resit==true
/                           %br
/                           - @gradeit2=@grade_student.first.render_grading2[-2,2]
/                           - if ["C-", "D+", "D", "E"].include?(@gradeit2.strip)==true
/                             %font{color: "red"}=(t 'exam.examresult.failed')
/                             - @value_state2 << '4'
/                             /retrieve final & repeat marks
/                             - @final_marks << @grade_student.first.exam1marks.to_f
/                             - @repeat_marks << @grade_student.first.exam2marks.to_f
/                           - else 
/                             =(t 'exam.examresult.passed')
/                             - @value_state2 << '3'
/                             /retrieve final & repeat marks
/                             - @final_marks << @grade_student.first.exam1marks.to_f
/                             - @repeat_marks << @grade_student.first.exam2marks.to_f
/                     /English subjects column-end
/                     
/                   - else
/                     /Other than English subjects 2 columns-start
/                     /Column 1: GRADE
/                     %td
/                       - if (posbasiks+[kejururawatan, perubatan, radiografi]).include?(@examresult.programme_id) && ["C-", "D+", "D", "E"].include?(@gradeit.strip)==true
/                         
/                         /TODO - confirm all programmes - same conditions?, previously confirmed by En Iz on 30Dec2015-just double confirm 
/                         ///////1st checking - ANY subject FAIL means FAIL the whole semester//////////
/                         - @value_state << '4'
/                         
/                         %font{color: "red"}= @gradeit
/                         
/                         /repeat paper
/                         - unless (@grade_student.first.exam2marks.nil? || @grade_student.first.exam2marks.blank?) 
/                           - if @grade_student.first.resit==true
/                             %br
/                             - gradeit2=@grade_student.first.render_grading2[-2,2] 
/                             - if ["C-", "D+", "D", "E"].include?(gradeit2.strip)==true
/                               %font{style: "color: red;"}=gradeit2
/                               - @value_state2 << '4'
/                               /- @latest_status << '4'
/                               /retrieve final & repeat marks
/                               - @final_marks << @grade_student.first.exam1marks.to_f
/                               - @repeat_marks << @grade_student.first.exam2marks.to_f
/                             - else
/                               %font{style: "color: black;"}=gradeit2
/                               - @value_state2 << '3'
/                               /- @latest_status << '3'
/                               /retrieve final & repeat marks
/                               - @final_marks << @grade_student.first.exam1marks.to_f
/                               - @repeat_marks << @grade_student.first.exam2marks.to_f
/                               
/                       - elsif (posbasiks+[kejururawatan, perubatan, radiografi]).include?(@examresult.programme_id) && ["C-", "D+", "D", "E"].include?(@gradeit.strip)==false
/                         - @value_state << '3' 
/                         /- @latest_status << '3'
/                         = @gradeit
/                       - else
/                         =@gradeit
/                         
/                     /Column 2: NG
/                     %td
/                       - if (posbasiks+[kejururawatan, perubatan, radiografi]).include?(@examresult.programme_id) && ["C-", "D+", "D", "E"].include?(@gradeit.strip)==true
/                         %font{style: "color: red"}= @grade_student.first.set_NG.to_f 
/                         
/                         /repeat paper
/                         - unless (@grade_student.first.exam2marks.nil? || @grade_student.first.exam2marks.blank?) 
/                           - if @grade_student.first.resit==true
/                             - ng2_it=@grade_student.first.set_NG2.to_f 
/                             - if ["C-", "D+", "D", "E"].include?(gradeit2.strip)==true
/                               %font{style: "color: red;"}=ng2_it
/                             - else
/                               %font{style: "color: black;"}=ng2_it
/                         
/                       - elsif (posbasiks+[kejururawatan, perubatan, radiografi]).include?(@examresult.programme_id) && ["C-", "D+", "D", "E"].include?(@gradeit.strip)==false
/                         =@grade_student.first.set_NG.to_f
/                         /https://trello.com/c/zlIT9mSO - Kebidanan (STATUS) : gagal if any of subject is failed - Kejururawatan too
/                       - else
/                         =@grade_student.first.set_NG.to_f
/                   /Other than English subjects 2 columns-end
/ 
/                 - else
/                   /Case2:Grade Not Exist yet
/                   - if english_subjects.include?(subject.code[0,4]) || (subject.code.strip.size < 10 && (subject.code.strip[-2,1].to_i==2 || subject.code.strip[-2,1].to_i==3))
/                     /Lulus OR Gagal 
/                     %td.centre{colspan: 2}
/                       %font{color: "red"}= t 'exam.examresult.failed'
/                   - else
/                     %td.centre &nbsp;
/                     %td.centre 0.00
/                   - @value_state << '4'
/                   /https://trello.com/c/zlIT9mSO - Kebidanan (STATUS) : gagal if any of subject has no grade - Kejururawatan too
/           
/             /For checking only
/             /=final_all 
/             /=final2_all   
/             /=final2b_all
/             /= credit2_all
/ 
/             /Calculate (i)NGK (Total Grade Points) - Final & Repeat
/             /Calculate (ii)PNGS (GPA) - Final & Repeat
/             - total_point=number_with_precision(Examresult.total(final_all, credit2_all), precision: 2)
/             - repeated_total_point=number_with_precision(Examresult.total(final2b_all, credit2_all), precision: 2) if @value_state.count('4') > 0
/             /NOTE - requires Correct Subject/Module code to be entered into Curriculum Mgmt - or will get NaN for gpa.
/             - if final2_all.count > 0 && credit2_all.count > 0
/               - gpa=number_with_precision((Examresult.total(final_all, credit2_all) / credit2_all.sum), precision: 2)
/             - else
/               - gpa=0.00
/             /Repeat : step3 
/             /For Repeat - final2b_all != final2_all
/             - if final2b_all.count > 0 && credit2_all.count > 0 && final2b_all != final2_all
/               - gpa_repeat=number_with_precision((Examresult.total(final2b_all, credit2_all) / credit2_all.sum), precision: 2)
/             /- else
/             /  - gpa_repeat=0.00
/             /determine LATEST GPA must be saved in DB
/             - if gpa_repeat
/               - gpa_to_save=gpa_repeat
/             - else
/               - gpa_to_save=gpa
/              
/             /Calculate (iii)PNGK (CGPA) 
/             - semno=@examresult.semester.to_i-1
/             - programmeid=@examresult.programme_id
/             - examresult_ids=Examresult.where(programme_id: programmeid).pluck(:id)
/             - @resultlines = Resultline.where(examresult_id: examresult_ids, student_id: @students[no].id).order(created_at: :asc)
/             - cgpa=number_with_precision(Examresult.cgpa_per_sem(@resultlines, semno), precision: 2) if @resultlines.count-1>=semno
/             - cgpa_be4_repeat= number_with_precision(Examresult.total(final_all, credit2_all) / credit2_all.sum, precision: 2)  
/             - if repeated_total_point
/               - total_point_final=repeated_total_point
/             - else
/               - total_point_final=total_point
/             = hidden_field "examresult[resultlines_attributes][#{no}]", :total, :size =>8, :value => total_point_final
/             = hidden_field "examresult[resultlines_attributes][#{no}]", :pngs17, :size =>8, :value => gpa_to_save
/             = hidden_field "examresult[resultlines_attributes][#{no}]", :pngk, :size =>8, :value => cgpa
/               
/             %td
/               /2-when FAIL final exam & repeat exam happens
/               - if @value_state.include?('4') && @value_state2.count > 0
/                 = total_point if total_point
/               /1-display LATEST status
/               - if repeated_total_point
/                 %br
/                 = repeated_total_point
/               - else
/                 = total_point
/             %td
/               /2-when FAIL final exam
/               - if @value_state.include?('4')
/                 %font{style: "color: red;"}=gpa 
/                 %br
/               - else
/                 =gpa
/               /%br
/               /1-display LATEST status
/               //////step4----repeat
/               - if gpa_repeat
/                 - if @value_state2.include?("4")
/                   %font{style: "color: red; text-decoration: underline;"}=gpa_repeat 
/                 - else
/                   =gpa_repeat
/             %td
/               /2-when FAIL final exam & repeat exam happens
/               - if @value_state.include?('4') && @value_state2.count > 0
/                 = cgpa_be4_repeat if cgpa_be4_repeat
/               /1-display LATEST status
/               =cgpa
/             
/             /Display STATUS
/             - fisioterapi=Programme.where(course_type: 'Diploma').where('name ILIKE (?)', '%Fisioterapi%').first.id
/             - perubatan=Programme.where(course_type: 'Diploma').where('name ILIKE (?)', 'Penolong Pegawai Perubatan').first.id
/             - if [fisioterapi, perubatan].include?(@examresult.programme_id)
/               - status_selection = DropDown::RESULT_STATUS_CONTRA
/             - else
/               - status_selection = DropDown::RESULT_STATUS
/             %td
/               /- unless @grade_student.nil? || @grade_student.blank?
/               /  - unless (@grade_student.first.exam2marks.nil? || @grade_student.first.exam2marks.blank?) 
/               /    - if @grade_student.first.resit==true
/               /      /what if just fail & repeat not yet done? - Overall STATUS should FAIL
/               /- if @value_state2.count > 0
/               /  /START - apply to all programme - when REPEAT papers exist, (inc. Grade 'resit' checkbox activated)
/               /  - fails_count=@value_state.count('4')
/               /  - fails_afterrepeat_count=@value_state2.count('4')
/               /  - passed_afterrepeat_count=@value_state2.count('3')
/               /  - if fails_count-fails_afterrepeat_count==passed_afterrepeat_count
/               /    - @value_status='3'
/               /    sini ka
/               /  - else
/               /    - @value_status='4'
/               /    alalll
/               /  /END - apply to all programme - when REPEAT papers exist, (inc. Grade 'resit' checkbox activated)
/               
/               /2-when FAIL final exam & repeat exam happens (STATUS of Final)
/               - if @value_state.include?('4') && @value_state2.count > 0
/                 /display previous (FAIL) Final exam status as failed
/                 %font{color: "red"}=(t 'exam.examresult.failed')
/                 
/               /1-display LATEST status 
/               /Latest status - is Final paper status if Repeat NOT exist
/               /Latest status - is (Final+Repeat) status if Repeat EXIST 
/               - if (posbasiks+[kejururawatan, perubatan, radiografi]).include?(@examresult.programme_id)
/                 - if @value_state2.count==0
/                   /FINAL status--------------------------
/                   - if @value_state.uniq.include?('4') 
/                     - @value_status='4'
/                   - else
/                     - @value_status='3'
/                   /- elsif @value_state2 != @value_state.count('3')
/                 - else
/                   /REPEAT status-----------------------
/                   /repeated != supposed to be repeated (fail, but not yet repeated)
/                   - if @value_state2.uniq.include?('4') 
/                     - @value_status='4'
/                   - else
/                     - if @value_state2.count == @value_state.count('4')
/                       - @value_status='3' 
/                     - else
/                       - @value_status='4' 
/ 
/                 /ASSIGN latest status value for record saving
/                 /= hidden_field "examresult[resultlines_attributes][#{no}]", :status, :size =>8, :value => @value_status
/                 - disp_status=(DropDown::RESULT_STATUS.find_all{|disp, value| value == @value_status}).map {|disp, value| disp}[0]
/                 - if @value_status=='4'
/                   - if @value_state2.count==0
/                     /when latest status is Final
/                     %font{style: "color: red;"}=disp_status
/                     = hidden_field "examresult[resultlines_attributes][#{no}]", :status, :size =>8, :value => @value_status
/                   - else
/                     /when latest status is Repeat
/                     ///
/                     - if @value_state2.count('4')==1 
/                       - if @repeat_marks[0] > @final_marks[0]
/                         /By default - FAIL 1 subject of repeated papers - qualified for VIVA (when Repeat marks > Final marks) (ie. @value_status is '4')
/                         - if @examresult.resultlines[no] && @examresult.resultlines[no].status!=@value_status
/                           /shall display LULUS if SAVED status in DB is PASS (coz VIVA was completed & passed) 
/                           /- require user to manually select 'Lulus' (Status) & 'Naik Semester' (Remark)
/                           - status_viva = @examresult.resultlines[no].status
/                           //baca DB
/                         - else
/                           /shall display select(GAGAL) if SAVED status in DB is still FAIL (coz VIVA not yet done)
/                           - status_viva = @value_status
/                           //baca current value
/                         = select_tag "examresult[resultlines_attributes][#{no}][status]", options_for_select([[t('select'), '0']]+status_selection, status_viva) 
/                     - else
/                       ///
/                       %font{style: "color: red; text-decoration: underline;"}=disp_status
/                       = hidden_field "examresult[resultlines_attributes][#{no}]", :status, :size =>8, :value => @value_status
/                 - else
/                   = disp_status
/                   = hidden_field "examresult[resultlines_attributes][#{no}]", :status, :size =>8, :value => @value_status
/                 /=@value_state
/               
/               - else
/                 = select_tag "examresult[resultlines_attributes][#{no}][status]", options_for_select([[t('select'), '0']]+status_selection, @value_status) 
/                 
/             /Display REMARK
/             %td
/               /Display - Ulang Subjek (previous status) if really repeated
/               - if @value_state.uniq.include?('4') && final2_all && @value_state2.count > 0
/                 %font{style: "color: red;"}=(DropDown::RESULT_REMARK.find_all{|disp, value| value == "1"}).map {|disp, value| disp}[0]
/                 
/               /= text_field "examresult[resultlines_attributes][#{no}]", :remark, :size =>8, :value => @value_remark
/               - unless @value_remark=='' || @value_remark==0
/               
/                 /NOTE-For Checking-start 
/                 /Final :
/                 /=@value_state
/                 /%br Repeat only :
/                 /=@value_state2
/                 /%br Status :
/                 /=@value_status
/                 /%br Remark:
/                 /=@value_remark
/                 /For Checking-end
/                 
/                 /ASSIGN Remark according to Status
/                 - if @value_status=='1' || @value_status=='2' || @value_status=='3'
/                   /Status : Passed (3-Lulus, 2-Kepujian, 1-Cemerlang) - Remark : 4-Naik Semester
/                   - @value_remark='4' 
/                 - elsif @value_status=='4'
/                   /Failed (4-Gagal) - Remark : (1-Ulang Subjek, 2-Viva, 3-Tamat Latihan, 5-Ulang Semester)
/                   /Status is Gagal, check COUNT of failed subjects
/                   - if @value_state.count("4")==5 && @examresult.semester=="1"
/                     /(a) Semester 1 : FAIL 5 subjects, set REMARK : Tamat Latihan
/                     - @value_remark="3"
/                   - elsif @value_state.count('4')<=4
/                     /(b) Any semester : FAIL 4 or less subjects,..
/                     - if @value_state2.count==0
/                       /set REMARK : Ulang Subjek (IF REPEAT not yet done)
/                       - @value_remark="1" 
/                     - else
/                       /when REPEAT done,..
/                       - if @value_state2.count('4')==1 
/                         - if @repeat_marks[0] > @final_marks[0]
/                           /By default - FAIL 1 subject of repeated papers - qualified for VIVA (when Repeat marks > Final marks) (ie. @value_status is '4')
/                           - if @examresult.resultlines[no] && @examresult.resultlines[no].status!=@value_status
/                             /shall display 'Naik Semester' (Remark) if SAVED status in DB is PASS (coz VIVA was completed & passed) 
/                             /- require user to manually select 'Lulus' (Status) & 'Naik Semester' (Remark)
/                             - @value_remark="4"
/                             /supposed read DB (but may just assign default as Naik Semester) if status already LULUS - but condition state this student rrequire a vVIVA
/                           - else
/                             - @value_remark="2"
/                           
/                         - else
/                           /FAIL 1 subject of repeated papers - Ulang Semester (when Repeat marks < Final marks)
/                           - @value_remark="5"
/                       - elsif @value_state2.count('4') >=2
/                         /FAIL 2 subjects or more of repeated papers - MUST 'Ulang Semester'
/                         - @value_remark="5"
/ 
/                       - else
/                         /passed
/                         - @value_remark="4" if @value_state2.count('4')==0 && @value_state2.count==@value_state.count('4')
/                 
/                 /%br Remark (after checking):
/                 /= @value_remark
/               = select_tag "examresult[resultlines_attributes][#{no}][remark]", options_for_select([[t('select'), '0']]+DropDown::RESULT_REMARK, @value_remark) 
/               
/               /NOTE - 22Feb2016-below : removed to 1) model/examresult.rb
/               / Usage - update Student Info (Status & Status Remark - Repeat Semester, Semester No) - to be use in (retrieval of student):
/               /2) Exammarks(controller - create_multiple), 3)Grades(controller - create_multiple) & 4)model/grade.rb - redundants allowed only for student with sstatus=='Repeat' (Repeat Semester)
/               /- if @value_remark=="5"
/               /  = @students[no].id
/               /  = @examresult.semester
/               /  - all_resultlines=Resultline.where(student_id: @students[no].id).pluck(:examresult_id)
/               /  - examresults_sem=Examresult.where(id: all_resultlines).pluck(:semester)
/               /  - latest_sem=examresults_sem.max
/               /  - if latest_sem==@examresult.semester
/               /    - student_toupdate=Student.where(id: @students[no].id).first
/               /    - student_toupdate.sstatus="Repeat"
/               /    - status_remark=@examresult.semester.to_s+","
/               /    - student_toupdate.sstatus_remark=status_remark
/               /    - student_toupdate.save
/               
/       /FINAL status before REPEAT papers         
/       /= @value_state     
/       /FINAL status after REPEAT papers
/       /= @value_state2
/       /= @latest_status
/       /NOTE - as of 1st Nov2015 : Value for STATUS - Kebidanan & Kejururawatan - set to 'Gagal' if any subject status is 'Gagal', otherwise set to 'Lulus'.
/       /Perubatan & radiografi - same conditions as Kebidanan & Kejururawatan (when 1 subject GAGAL, means GAGAL for status keseluruhan) - based on supplied Excel file
/       /Other programmes : requires user to select STATUS accordingly UNLESS define by user.
/       /Total, PNGS17 : auto-generated, non-editable & display only 4 all programmes.
/       /STATUS : auto-generated, non-editable & display only for Kejururawatan & Kebidanan.