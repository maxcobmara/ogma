- model_class = Student
.page-header
  %h1= t('student.students.list')#, :default => model_class.model_name.human.pluralize
= render 'shared/flashes'

.navbar.navbar-inverse{role: "navigation", style: "padding-right:40px;"}
  %ul.nav.navbar-nav
    - permitted_to? :create, :students do
      %li= link_to content_tag(:li, fa_icon("asterisk", text: (t 'actions.new'))), new_student_path
      %li= link_to content_tag(:li, fa_icon("file-excel-o", text: (t 'actions.import_excel'))), import_excel_students_path    
  %ul.nav.navbar-nav.navbar-right
    %li.toga= link_to content_tag(:li, fa_icon("search", text: (t 'actions.search'))), "#", class: "index_search_bar"
    - permitted_to? :student_report, :students do
      %li.dropdown
        %a.dropdown-toggle{"data-toggle" => "dropdown", :href => "#"}
          = fa_icon "print", text: (t 'actions.print')
          %b.caret
        %ul.dropdown-menu
          - programmes=Programme.roots.where(college_id: current_user.college_id)
          - pnames=programmes.pluck(:name)
          - programmes.each do |programme|
            /NOTE - kskb : distinct programme name already differentiate type of course
            /NOTE - amsas : require both to be displayed
            - if pnames.count==pnames.uniq.count
              %li= link_to  (fa_icon "file-pdf-o", text: programme.name), student_report_students_path(programme_id: programme.id, format: 'pdf')
              ss
            - else
              %li= link_to  (fa_icon "file-pdf-o", text: programme.fullname), student_report_students_path(programme_id: programme.id, format: 'pdf')
    - permitted_to? :manage, :students do
      %li.dropdown
        %a.dropdown-toggle{"data-toggle" => "dropdown", :href => "#"}
          = fa_icon "external-link", text: (t 'actions.export')
          %b.caret
        %ul.dropdown-menu
          %li= link_to (fa_icon "file-excel-o", text: (t "student.students.list")), students_path(params.merge(format: "xls"))
     
.row.filter{style: "display:none;"}
  .col-md-2

.row
  %table.table-striped.table-hover.ogma
    %thead
      %tr
        %th= sort_link(@search, :formatted_mykad, (t 'student.students.formatted_mykad'))
        %th= sort_link(@search, :name, (t 'student.students.name'))
        %th= sort_link(@search, :matrixno, (t 'student.students.matrixno'))
        %th{style: "width:20%;"}= sort_link(@search, :race, (t 'student.students.race'))
        //%th.ac{:colspan => "2"}= t 'control'


    %tbody
    = render "index_search"
    - @students.group_by{|t|t.intake}.each do |intake, student_course|
      %tr
        %td.group{:colspan => "10", :style => "background-color:#EFF1F1;"}
          %br
          %span{:style => "color:#218AFB;font-weight:bold;"}= intake.try(:strftime, '%m/%Y')
      - student_course.group_by(&:course).each do |course, students|
        %tr
          %td.group{:colspan => "12", :style => "background-color:#E5E4E2;"}
            %span{:style => "color:#black;font-weight:bold;font-size:14px"}= link_to course.try(:name), "#", class: 'bogus'
        - for student in students
          %tr
            %td= link_to student.formatted_mykad, student_path(student)
            %td= student.name
            %td= student.matrixno
            %td
              - if (student.race2.nil? && !student.race.nil? && student.race!='')||(student.race2.blank? && !student.race.blank? &&  student.race!='')
                %font{:color => "red"}
                  *#{student.race}



  .right{style:"padding:0 30px; margin:0;"}= paginate @students, :theme => 'twitter-bootstrap-3'
